import os
import shutil

import pytest

from header_utils import HeaderProcessor

BEFORE=[
    '#include "core/executor.hpp"',
    '#include "algorithm/critical.hpp"',
    '#include "algorithm/for_each.hpp"',
    '#include <vector>',
    '#include <mutex>',
    '#include "declarations.hpp"',
    '#include <atomic>',
    '#include <vector>',
    '#include <cassert>',
    '#include <cstdint>',
    '#include <cstddef>',
    '#include <cstdlib>',
    '#include "task.hpp"',
    '#include "graph.hpp"',
    '#include <iostream>',
    '#include <sstream>',
    '#include <exception>',
    '#include "../utility/stream.hpp"',
    '#include "declarations.hpp"',
    '#include "tsq.hpp"',
    '#include "notifier.hpp"',
    '#include "../utility/iterator.hpp"',
    '#include "../utility/object_pool.hpp"',
    '#include "../utility/traits.hpp"',
    '#include "../utility/os.hpp"',
    '#include "../utility/math.hpp"',
    '#include "../utility/small_vector.hpp"',
    '#include "error.hpp"',
    '#include "declarations.hpp"',
    '#include "semaphore.hpp"',
    '#include "environment.hpp"',
    '#include "topology.hpp"',
    '#include <iostream>',
    '#include <vector>',
    '#include <cstdlib>',
    '#include <cstdio>',
    '#include <atomic>',
    '#include <memory>',
    '#include <deque>',
    '#include <mutex>',
    '#include <condition_variable>',
    '#include <thread>',
    '#include <algorithm>',
    '#include <numeric>',
    '#include <cassert>',
    '#include "task.hpp"',
    '#include "worker.hpp"',
    '#include "observer.hpp"',
    '#include "taskflow.hpp"',
    '#include "flow_builder.hpp"',
    '#include "observer.hpp"',
    '#include "taskflow.hpp"',
    '#include "cuda_execution_policy.hpp"',
    '#include "cuda_error.hpp"',
    '#include "cuda_task.hpp"',
    '#include "cuda_optimizer.hpp"',
    '#include "cuda_graph.hpp"',
    '#include "cuda_memory.hpp"',
    '#include "cuda_stream.hpp"',
    '#include "cuda_meta.hpp"',
    '#include "../utility/traits.hpp"',
    '#include <cuda.h>',
    '#include <iostream>',
    '#include <sstream>',
    '#include <exception>',
    '#include "../utility/stream.hpp"',
    '#include "cuda_pool.hpp"',
    '#include "cuda_graph.hpp"',
    '#include "cuda_error.hpp"',
    '#include "cuda_device.hpp"',
    '#include "../taskflow.hpp"',
    '#include "cuda_task.hpp"',
    '#include "cuda_capturer.hpp"',
    '#include "cuda_error.hpp"',
    '#include "../cudaflow.hpp"',
    '#include "../cudaflow.hpp"',
    '#include "../cudaflow.hpp"',
    '#include "for_each.hpp"',
    '#include "reduce.hpp"',
    '#include "../cuda_error.hpp"',
    '#include "merge.hpp"',
    '#include "../cudaflow.hpp"',
    '#include "reduce.hpp"',
    '#include "../cudaflow.hpp"',
    '#include "../core/executor.hpp"',
    '#include "../core/executor.hpp"',
    '#include "../taskflow.hpp"',
    '#include "../core/executor.hpp"',
    '#include "../core/executor.hpp"',
    '#include "../core/task.hpp"',
    '#include <CL/sycl.hpp>',
    '#include "sycl_meta.hpp"',
    '#include "../taskflow.hpp"',
    '#include "sycl_task.hpp"',
    '#include "sycl_graph.hpp"',
    '#include "sycl_execution_policy.hpp"',
    '#include "../syclflow.hpp"',
    '#include "../sycl_flow.hpp"',
    '#include "../sycl_flow.hpp"',
    '#include "../core/flow_builder.hpp"',
    '#include "task_trait.hpp"',
    '#include "tuple_utils.hpp"',
    '#include "type_list.hpp"',
    '#include <cstddef>',
    '#include <tuple>',
    '#include "dsl/task_dsl.hpp"',
    '#include "../core/flow_builder.hpp"',
    '#include "../core/task.hpp"',
    '#include "type_list.hpp"',
    '#include <type_traits>',
    '#include <cstddef>',
    '#include "../core/flow_builder.hpp"',
    '#include "meta_macro.hpp"',
    '#include "task_analyzer.hpp"',
    '#include "task_trait.hpp"',
    '#include "connection.hpp"',
    '#include "type_list.hpp"',
    '#include <type_traits>',
    '#include <iostream>',
    '#include <string>',
    '#include <cstring>',
    '#include <limits>',
    '#include <random>',
    '#include <chrono>',
    '#include <type_traits>',
    '#include <iterator>',
    '#include <iostream>',
    '#include <fstream>',
    '#include <mutex>',
    '#include <stack>',
    '#include <queue>',
    '#include <vector>',
    '#include <algorithm>',
    '#include <memory>',
    '#include <atomic>',
    '#include <thread>',
    '#include <future>',
    '#include <functional>',
    '#include <unordered_map>',
    '#include <unordered_set>',
    '#include <sstream>',
    '#include <list>',
    '#include <numeric>',
    '#include <random>',
    '#include <iomanip>',
    '#include <cassert>',
    '#include <cmath>',
    '#include <array>',
    '#include <string>',
    '#include <variant>',
    '#include <optional>',
    '#include <iostream>',
    '#include <string>',
    '#include <algorithm>',
    '#include <cassert>',
    '#include <cstddef>',
    '#include <cstdlib>',
    '#include <cstring>',
    '#include <initializer_list>',
    '#include <iterator>',
    '#include <memory>',
    '#include <atomic>',
    '#include <thread>',
    '#include <atomic>',
    '#include <mutex>',
    '#include <vector>',
    '#include <cassert>',
    '#include <cstddef>',
    '#include <cstdlib>',
    '#include <cstdio>',
    '#include <string>',
    '#include <cstddef>',
    '#include <type_traits>'
]

AFTER=[
    '#include <taskflow/core/executor.hpp>',
    '#include <taskflow/algorithm/critical.hpp>',
    '#include <taskflow/algorithm/for_each.hpp>',
    '#include <vector>',
    '#include <mutex>',
    '#include <taskflow/core/declarations.hpp>',
    '#include <atomic>',
    '#include <vector>',
    '#include <cassert>',
    '#include <cstdint>',
    '#include <cstddef>',
    '#include <cstdlib>',
    '#include <taskflow/core/task.hpp>',
    '#include <taskflow/core/graph.hpp>',
    '#include <iostream>',
    '#include <sstream>',
    '#include <exception>',
    '#include <taskflow/utility/stream.hpp>',
    '#include <taskflow/core/declarations.hpp>',
    '#include <taskflow/core/tsq.hpp>',
    '#include <taskflow/core/notifier.hpp>',
    '#include <taskflow/utility/iterator.hpp>',
    '#include <taskflow/utility/object_pool.hpp>',
    '#include <taskflow/utility/traits.hpp>',
    '#include <taskflow/utility/os.hpp>',
    '#include <taskflow/utility/math.hpp>',
    '#include <taskflow/utility/small_vector.hpp>',
    '#include <taskflow/core/error.hpp>',
    '#include <taskflow/core/declarations.hpp>',
    '#include <taskflow/core/semaphore.hpp>',
    '#include <taskflow/core/environment.hpp>',
    '#include <taskflow/core/topology.hpp>',
    '#include <iostream>',
    '#include <vector>',
    '#include <cstdlib>',
    '#include <cstdio>',
    '#include <atomic>',
    '#include <memory>',
    '#include <deque>',
    '#include <mutex>',
    '#include <condition_variable>',
    '#include <thread>',
    '#include <algorithm>',
    '#include <numeric>',
    '#include <cassert>',
    '#include <taskflow/core/task.hpp>',
    '#include <taskflow/core/worker.hpp>',
    '#include <taskflow/core/observer.hpp>',
    '#include <taskflow/core/taskflow.hpp>',
    '#include <taskflow/core/flow_builder.hpp>',
    '#include <taskflow/core/observer.hpp>',
    '#include <taskflow/core/taskflow.hpp>',
    '#include <taskflow/cuda/cuda_execution_policy.hpp>',
    '#include <taskflow/cuda/cuda_error.hpp>',
    '#include <taskflow/cuda/cuda_task.hpp>',
    '#include <taskflow/cuda/cuda_optimizer.hpp>',
    '#include <taskflow/cuda/cuda_graph.hpp>',
    '#include <taskflow/cuda/cuda_memory.hpp>',
    '#include <taskflow/cuda/cuda_stream.hpp>',
    '#include <taskflow/cuda/cuda_meta.hpp>',
    '#include <taskflow/utility/traits.hpp>',
    '#include <cuda.h>',
    '#include <iostream>',
    '#include <sstream>',
    '#include <exception>',
    '#include <taskflow/utility/stream.hpp>',
    '#include <taskflow/cuda/cuda_pool.hpp>',
    '#include <taskflow/cuda/cuda_graph.hpp>',
    '#include <taskflow/cuda/cuda_error.hpp>',
    '#include <taskflow/cuda/cuda_device.hpp>',
    '#include <taskflow/taskflow.hpp>',
    '#include <taskflow/cuda/cuda_task.hpp>',
    '#include <taskflow/cuda/cuda_capturer.hpp>',
    '#include <taskflow/cuda/cuda_error.hpp>',
    '#include <taskflow/cuda/cudaflow.hpp>',
    '#include <taskflow/cuda/cudaflow.hpp>',
    '#include <taskflow/cuda/cudaflow.hpp>',
    '#include <taskflow/cuda/algorithm/for_each.hpp>',
    '#include <taskflow/cuda/algorithm/reduce.hpp>',
    '#include <taskflow/cuda/cuda_error.hpp>',
    '#include <taskflow/cuda/algorithm/merge.hpp>',
    '#include <taskflow/cuda/cudaflow.hpp>',
    '#include <taskflow/cuda/algorithm/reduce.hpp>',
    '#include <taskflow/cuda/cudaflow.hpp>',
    '#include <taskflow/core/executor.hpp>',
    '#include <taskflow/core/executor.hpp>',
    '#include <taskflow/taskflow.hpp>',
    '#include <taskflow/core/executor.hpp>',
    '#include <taskflow/core/executor.hpp>',
    '#include <taskflow/core/task.hpp>',
    '#include <CL/sycl.hpp>',
    '#include <taskflow/sycl/sycl_meta.hpp>',
    '#include <taskflow/taskflow.hpp>',
    '#include <taskflow/sycl/sycl_task.hpp>',
    '#include <taskflow/sycl/sycl_graph.hpp>',
    '#include <taskflow/sycl/sycl_execution_policy.hpp>',
    '#include <taskflow/sycl/syclflow.hpp>',
    '#include <taskflow/sycl/sycl_flow.hpp>',
    '#include <taskflow/sycl/sycl_flow.hpp>',
    '#include <taskflow/core/flow_builder.hpp>',
    '#include <taskflow/dsl/task_trait.hpp>',
    '#include <taskflow/dsl/tuple_utils.hpp>',
    '#include <taskflow/dsl/type_list.hpp>',
    '#include <cstddef>',
    '#include <tuple>',
    '#include <taskflow/dsl/dsl/task_dsl.hpp>',
    '#include <taskflow/core/flow_builder.hpp>',
    '#include <taskflow/core/task.hpp>',
    '#include <taskflow/dsl/type_list.hpp>',
    '#include <type_traits>',
    '#include <cstddef>',
    '#include <taskflow/core/flow_builder.hpp>',
    '#include <taskflow/dsl/meta_macro.hpp>',
    '#include <taskflow/dsl/task_analyzer.hpp>',
    '#include <taskflow/dsl/task_trait.hpp>',
    '#include <taskflow/dsl/connection.hpp>',
    '#include <taskflow/dsl/type_list.hpp>',
    '#include <type_traits>',
    '#include <iostream>',
    '#include <string>',
    '#include <cstring>',
    '#include <limits>',
    '#include <random>',
    '#include <chrono>',
    '#include <type_traits>',
    '#include <iterator>',
    '#include <iostream>',
    '#include <fstream>',
    '#include <mutex>',
    '#include <stack>',
    '#include <queue>',
    '#include <vector>',
    '#include <algorithm>',
    '#include <memory>',
    '#include <atomic>',
    '#include <thread>',
    '#include <future>',
    '#include <functional>',
    '#include <unordered_map>',
    '#include <unordered_set>',
    '#include <sstream>',
    '#include <list>',
    '#include <numeric>',
    '#include <random>',
    '#include <iomanip>',
    '#include <cassert>',
    '#include <cmath>',
    '#include <array>',
    '#include <string>',
    '#include <variant>',
    '#include <optional>',
    '#include <iostream>',
    '#include <string>',
    '#include <algorithm>',
    '#include <cassert>',
    '#include <cstddef>',
    '#include <cstdlib>',
    '#include <cstring>',
    '#include <initializer_list>',
    '#include <iterator>',
    '#include <memory>',
    '#include <atomic>',
    '#include <thread>',
    '#include <atomic>',
    '#include <mutex>',
    '#include <vector>',
    '#include <cassert>',
    '#include <cstddef>',
    '#include <cstdlib>',
    '#include <cstdio>',
    '#include <string>',
    '#include <cstddef>',
    '#include <type_traits>'
]

def test_process_headers():
    test_headers = 'tests/include-before'
    target = 'tests/include'
    if os.path.exists(target):
        shutil.rmtree(target)
    shutil.copytree(test_headers, target)

    # assert 'before-changes' state is the same
    before = HeaderProcessor(path='tests/include-before')
    assert before.get_include_statements() == BEFORE

    # process headers
    after = HeaderProcessor(path=target, skip_backup=True)
    after.process_headers()

    # assert 'post-changes' state is as required
    assert after.get_include_statements() == AFTER

    # cleanup
    if os.path.exists(target):
        shutil.rmtree(target)

def test_process_output_dir():
    test_headers = 'tests/include-before'
    output_dir = 'tests/include'
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)

    # assert 'before-changes' state is the same
    before = HeaderProcessor(path='tests/include-before')
    assert before.get_include_statements() == BEFORE

    # process output_dir
    after = HeaderProcessor(path=test_headers, output_dir=output_dir)
    after.process_headers()

    # assert 'post-changes' state is as required
    assert after.get_include_statements(from_output_dir=True) == AFTER

    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)
